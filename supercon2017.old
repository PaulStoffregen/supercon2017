#include <SPI.h>
#include <ILI9341_t3.h>
#include <font_GeorgiaItalic.h>

#define TFT_DC  9
#define TFT_CS 10

// Use hardware SPI (#13, #12, #11) and the above for CS/DC
ILI9341_t3 tft = ILI9341_t3(TFT_CS, TFT_DC);

extern "C" const unsigned char teensy32[];

void setup() {
  tft.begin();
  tft.setRotation(1);
  tft.fillScreen(ILI9341_BLACK);
  tft.setTextColor(ILI9341_YELLOW);
  //tft.setTextSize(2);
  //tft.println("Waiting for Arduino Serial Monitor...");

  Serial.begin(9600);
  Serial.println("ILI9341 Test!"); 

  tft.setCursor(20, 30);
  tft.setFont(Georgia_96_Italic);
  tft.print("Paul");

  const unsigned char *p = teensy32 + 18;
  for (int y=0; y < 72; y++) {
    for (int x=0; x < 151; x++) {
      unsigned char r = *p++;
      unsigned char g = *p++;
      unsigned char b = *p++;
      p++;
      uint16_t c = ILI9341_t3::color565(r, g, b);
      tft.drawPixel(x+85, y+152, c);
    }
  }
  
}

void loop(void) {
  asm("wfi");
}

/*
#! /usr/bin/perl

binmode IN, ":bytes";
$file = $ARGV[0];

foreach $file (@ARGV) {
        open(IN, $file) or die "Can't open $file: $!\n";

        $count = 0;

        while (read(IN, $byte, 1) == 1) {
                $n = ord($byte);
                printf "0x%02X,", $n;
                $count++;
                print "\n" if ($count & 15) == 0;
        }
        print "\n";
}

*/
